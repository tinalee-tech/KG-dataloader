# GTEx eQTL data format
# all contents after '#' are comments and will not be loaded
# all '{}'s are regular expressions, but the data type has to be defined in a block
# all label and variable names/values should have no spaces

>file_name # If it is not a regular expression, this part is not important and you can provide anything
None

>headers # number of header lines
2

>graph_pattern # all nodes and edges and their labels
node:A{
    label = loop
}
node:B{
    label = loop_anchor
}
node:C{
    label = loop_anchor
}
edge:D{
    label = anchor_at,  # label don't contain spaces (neo4j format restriction)
    from = A,
    to = B
}
edge:E{
    label = anchor_at,
    from = A,
    to = C
}

>line_format
# column_name column_information (the order must be right! And all columns have to be present!)
# if that column is not important, just put a "None" (actually anything without a '{}' would work)
chr1 {B.chr}
x1 {B.start_loc}
x2 {B.end_loc}
chr2 {C.chr}
y1 {C.start_loc}
y2 {C.end_loc}
name None
score None
strand1 None
strand2 None
color None
observed None
expectedBL None
expectedDonut None
expectedH None
expectedV None
fdrBL None
fdrDonut None
fdrH None
fdrV None
numCollapsed None
centroid1 {A.centroid1}
centroid2 {A.centroid2}
radius {A.radius}

>global_variables
# variables that apply to all nodes/edges
A.cell_line = H1-hESC (str)
A.caller = juicer_tools_version_1.11.04 (str)
B.cell_line = H1-hESC (str)
B.caller = juicer_tools_version_1.11.04 (str)
C.cell_line = H1-hESC (str)
C.caller = juicer_tools_version_1.11.04 (str)

>node_attributes
# record the attributes and their data types that will be in the graph (from the tabular data, not including the global ones)
A.centroid1 (int)
A.centroid2 (int)
A.radius (int)
B.chr (int)
B.start_loc (int)
B.end_loc (int)
C.chr (int)
C.start_loc (int)
C.end_loc (int)

>node_primary_keys
# specify the attributes to be matched (primary keys) for a node when merging into neo4j database (edges don't have primary keys)
# on match renew other attributes
# otherwise create new node
A.cell_line (str)
A.caller (str)
A.centroid1 (int)
A.centroid2 (int)
B.cell_line (str)
B.caller (str)
B.chr (int)
B.start_loc (int)
B.end_loc (int)
C.cell_line (str)
C.caller (str)
C.chr (int)
C.start_loc (int)
C.end_loc (int)
